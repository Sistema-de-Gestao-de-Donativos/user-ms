from enum import Enum
from fastapi import Query
from typing import Annotated, Literal

from pydantic import Field, PositiveInt


class Validators:
    """Define the validation for a schema. It is used for the type hinting and the validation of the schema."""

    base_string = {
        "min_length": 1,
        "max_length": 255,
    }

    non_negative = {
        "ge": 0,
    }

    positive = {
        "gt": 0,
    }

    base_decimal = non_negative | {
        "decimal_places": 2,
    }


class Typing:
    """Define the typing for a schema. It is used for the type hinting and the validation of the schema."""

    skip = Annotated[int, Query(**Validators.non_negative,
                                description="A.K.A 'offset', determines the first index of the result to filter by")]

    limit = Annotated[int, Query(**Validators.non_negative,
                                 description="A.K.A 'count', determines the maximum amount of results to return")]

    non_negative = Annotated[int, Field(**Validators.non_negative, examples=[0, 1],
                                        description="Any number that is greater than or equal to 0")]

    id = Annotated[int, Field(**Validators.positive, examples=[1, 2],
                              description="The unique id of the entity. It is auto-generated by the database.")]

    ids = Annotated[list[PositiveInt], Field(examples=[[1, 2], [3, 4]],
                                             description="The list of the unique ids of the entity. It is auto-generated by the database.")]

    def get_field(self, key: str, field: Literal["default", "examples", "description"]):
        # Check if the key exists as an attribute of the class
        if not hasattr(self, key):
            raise AttributeError(f"No attribute '{key}' found in Typing class")

        # Get the value of the attribute
        attribute_value = getattr(self, key)

        # Check if the attribute is annotated
        metadata = getattr(attribute_value, '__metadata__', None)
        field_info = metadata[0]
        if not metadata or not field_info:
            raise AttributeError(f"No metadata found for attribute '{key}'")

        value = getattr(field_info, field, None)
        if not value:
            raise AttributeError(f"No {field} found for attribute '{key}'")

        if isinstance(value, list):
            value = value[0]
        if isinstance(value, Enum):
            value = value.value

        return str(value)

    def get_with_changed_description(self, key: str, new_description: str, replace_entity: Annotated[bool, "Substitutes the generic word 'entity' from the default description with the {new_description} param"] = False):
        # Check if the key exists as an attribute of the class
        if not hasattr(self, key):
            raise AttributeError(f"No attribute '{key}' found in Typing class")

        # Get the value of the attribute
        attribute_value = getattr(self, key)

        # Check if the attribute is annotated with examples
        metadata = getattr(attribute_value, '__metadata__', None)
        if not metadata or not (field_info := metadata[0]):
            raise AttributeError(f"No metadata found for attribute '{key}'")

        # Change the description
        if replace_entity:
            current_description = str(getattr(field_info, 'description'))
            new_description = current_description.replace(
                'entity', new_description)
        setattr(field_info, 'description', new_description)

        attr = getattr(self, key)

        return attr

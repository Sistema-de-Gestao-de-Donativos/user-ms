from enum import Enum
from pydantic import BaseModel, Field
from typing import Annotated, Optional

from auth.regex import email_regex_pattern, password_regex_description
from schemas.Permissions import PermissionsBase, PermissionsTyping, UserRole
from schemas.Validators import Typing, Validators


DEFAULT_PASSWORD = "M!thr@24"


class UserStatus(Enum):
    # Disabled by the administrator
    disabled = "disabled"
    # Missing required information
    incomplete = "incomplete"
    # Enabled; meaning the user can login and use the system
    enabled = "enabled"
    # Active; meaning the user is currently logged in and has a GPU session and can or cannot be running a process
    active = "active"


class UsersValidators(Validators):
    """Define the validation for the Users schema. It is used for the type hinting and the validation of the schema."""

    email = Validators.base_string | {
        "pattern": email_regex_pattern
    }

    password = {
        "min_length": 8,
        "max_length": 32,
    }


users_validators = UsersValidators()


class Useful(Typing):
    api_status = Annotated[int, Field(200, examples=[200, 400, 409],
                                      description="The HTTP status code of the API response.")]

    name = Annotated[str, Field(**users_validators.base_string, examples=["User", "John Doe"],
                                description="The user's name. Will be the display name in the UI.")]

    email = Annotated[str, Field(**users_validators.email, examples=["user@pucrs.br", "email@valid_domain.com"],
                                 description="The user's email. Will be used as the login username.")]


class UserInvite(BaseModel):
    name: Useful.name
    email: Useful.email


class UsersTyping(Typing):
    """Define the typing for the Users schema. It is used for the type hinting and the validation of the schema."""

    id = Typing().get_with_changed_description("id", "user", replace_entity=True)

    name = Useful.name

    email = Useful.email

    password = Annotated[str, Field(**users_validators.password, examples=[DEFAULT_PASSWORD, "Senh@123"],
                                    description=f"The user's password. {password_regex_description}")]

    hashed_password = Annotated[str, Field(exclude=True,
                                           description="Auto-generated by the database. A hash of the user's password.")]

    status = Annotated[UserStatus, Field(UserStatus.enabled, examples=[UserStatus.enabled, UserStatus.active],
                                         description="The user's status. It will affect the user's ability to login and use the system.")]

    role = PermissionsTyping.type

    subject = Annotated[str, Field("Aplication Invitation",
                                   description="The subject of the invitation email.")]

    body = Annotated[str, Field("You have been invited to join the Aplication. Please click on the link below to register.",
                                description="The body of the invitation email.")]

    users = Annotated[list[UserInvite], Field([],
                                              description="A list of users to be invited to join the Aplication.")]

    link_expiration_days = Annotated[int, Field(7, **users_validators.positive,
                                                description="The number of days the invitation link will be valid.")]

    email_invite_api_response = Annotated[list[tuple[Useful.api_status, Useful.email]], Field(
        examples=[[], [(409, "email@already_in_db.com")]])]

    pool_count = Annotated[int, Field(**users_validators.non_negative,
                                      description="The number of GPU pools the user is a member of.")]

    session_count = Annotated[int, Field(**users_validators.non_negative,
                                         description="The total number of GPU sessions the user has.")]

    max_concurrent_gpus = PermissionsTyping.max_concurrent_gpus


class UsersBaseInfo(BaseModel):
    name: UsersTyping.name


class UsersBase(UsersBaseInfo):
    email: UsersTyping.email
    status: UsersTyping.status

    def __repr__(self):
        return f"<User name={self.name} - email={self.email}>"


class UsersInvite(BaseModel):
    subject: UsersTyping.subject
    body: UsersTyping.body
    users: UsersTyping.users
    link_expiration_days: UsersTyping.link_expiration_days
    default_password: Optional[UsersTyping.password] = DEFAULT_PASSWORD
    permissions: Optional[PermissionsBase] = PermissionsBase()

    model_config = {
        "json_schema_extra": {
            "example": {
                "subject": UsersTyping().get_field('subject', 'default') + " - {{name}}",
                "body": "Greetings, {{name}}! " + UsersTyping().get_field('body', 'default'),
                "users": [{field: UsersTyping().get_field(field, "examples") for field in ["name", "email"]}],
                "default_password": UsersTyping().get_field("password", "examples"),
                "permissions": {
                    "max_concurrent_gpus": 2,
                    "type": UserRole.developer.value,
                    "gpu_pools_permissions": [1]
                }
            }
        }
    }


class UsersCreate(UsersBase):
    password: Optional[UsersTyping.password] = DEFAULT_PASSWORD
    status: UsersTyping.status = UserStatus.enabled

    model_config = {
        "json_schema_extra": {
            "example": {field: UsersTyping().get_field(field, "examples") for field in ["name", "email", "password"]}
        }
    }


class UsersUpdate(UsersBase):
    name: Optional[UsersTyping.name] = None
    email: Optional[UsersTyping.email] = None
    status: Optional[UsersTyping.status] = None

    model_config = {
        "json_schema_extra": {
            "example": {field: UsersTyping().get_field(field, "examples") for field in ["name", "status"]}
        }
    }


class UsersOut(UsersBase):
    id: UsersTyping.id
    permission_id: UsersTyping.id


class UsersInDb(UsersOut):
    hashed_password: UsersTyping.hashed_password

    class Config:
        from_attributes = True


class UsersDisplay(BaseModel):
    id: UsersTyping.id
    name: UsersTyping.name
    status: UsersTyping.status
    role: UsersTyping.role
    pool_count: UsersTyping.pool_count
    session_count: UsersTyping.session_count
    max_concurrent_gpus: UsersTyping.max_concurrent_gpus
